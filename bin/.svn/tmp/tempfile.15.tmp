#!/usr/bin/env python
#Given N-maps calculates cross-reconstruction between them


from flipper import *
from numpy.fft import fftshift,fftfreq,fft2,ifft2
from scipy import interpolate
from scipy import *
import scipy
import os
import random
import sys
import pickle
from lmcTools import *
import lmcTools

strList = ['allall']
indicesList = [[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]
count = 0

def weightedBinInAnnuli(p2d,weightMap,binningFile,trimAtL,powerOfL):
    binLo,binHi,binCent = fftTools.readBinningFile(binningFile)
    id = numpy.where(binHi<trimAtL)
    binHi = binHi[id]
    binLo = binLo[id]
    binCent = binCent[id]
    binnedPower = binCent.copy()*0.
    binCount = binCent.copy()*0.
    weightedBincount = binCent.copy()
    modIntLMap = numpy.array(p2d.modLMap + 0.5,dtype='int64')
    for ibin in xrange(len(binHi)):
        loc = numpy.where((modIntLMap >= binLo[ibin]) & (modIntLMap <= binHi[ibin]))
        binMap = p2d.powerMap.copy()*0.
        binMap[loc] = weightMap[loc]
        binnedPower[ibin] = numpy.sum(p2d.powerMap*binMap*p2d.modLMap**powerOfL)/numpy.sum(binMap)
        binCount[ibin] = len(loc[0])
        weightedBincount[ibin] = 1./(numpy.sum(weightMap[loc]**2)/(numpy.sum(weightMap[loc]))**2)
    #print binCount[ibin]/weightedBincount
    return binLo,binHi,binCent,binnedPower, weightedBincount/2.
                                                                                                                                    

def powerFromKMap(map1,map2,p2db,p2d2):
    power = p2db.copy()
    power.powerMap = numpy.real(numpy.conjugate(map2)*map1)

    return power

p = flipperDict.flipperDict()
p.read_from_file(sys.argv[1])
mcDir = p['mcDir']
dataDir = p['dataDir']

weightMap = pickle.load(open(mcDir+'/scatterFileSeason'))
weightMap = 1./weightMap.powerMap*2.
weightMap[0,0] = weightMap[0,1]


nullMap1 = 1.*pickle.load(open(mcDir+'/averageNullKappaMap1.pkl'))
nullMap2 = 1.*pickle.load(open(mcDir+'/averageNullKappaMap2.pkl'))
nullMap3 = 1.*pickle.load(open(mcDir+'/averageNullKappaMap3.pkl'))
nullMap4 = 1.*pickle.load(open(mcDir+'/averageNullKappaMap4.pkl'))


for i in xrange(1):
    holder = liteMap.liteMapFromFits('/scratch/sudeep/lensMC/randomMapsRealNoiseBoth/lensedMaps_CMBplusNoise_071/patch_148_000_1')
    p2d = fftTools.powerFromLiteMap(holder)
    p2d = p2d.trimAtL(3300)
    ftex = p2d.copy()
    for j in xrange(1):
        difference = 1
        if difference:
            print i,j,indicesList[i],indicesList[j], difference
            crossPower1Old = powerFromKMap(pickle.load(open(dataDir+'/saveKappas_000_'+strList[i]))-nullMap1[i],pickle.load(open(dataDir+'/saveKappas_000_'+strList[j]))-nullMap1[j],p2d,ftex)
        
            crossPower2Old = powerFromKMap(pickle.load(open(dataDir+'/saveKappas_001_'+strList[i]))-nullMap2[i],pickle.load(open(dataDir+'/saveKappas_001_'+strList[j]))-nullMap2[j],p2d,ftex)
            crossPower3Old = powerFromKMap(pickle.load(open(dataDir+'/saveKappas_002_'+strList[i]))-nullMap3[i],pickle.load(open(dataDir+'/saveKappas_002_'+strList[j]))-nullMap3[j],p2d,ftex)
            crossPower4Old = powerFromKMap(pickle.load(open(dataDir+'/saveKappas_003_'+strList[i]))-nullMap4[i],pickle.load(open(dataDir+'/saveKappas_003_'+strList[j]))-nullMap4[j],p2d,ftex)                                                                        
            pickle.dump(pickle.load(open(dataDir+'/saveKappas_000_'+strList[i]))-nullMap1[i],open('kappa0.pkl','w'))
            pickle.dump(pickle.load(open(dataDir+'/saveKappas_001_'+strList[i]))-nullMap2[i],open('kappa1.pkl','w'))
            pickle.dump(pickle.load(open(dataDir+'/saveKappas_002_'+strList[i]))-nullMap3[i],open('kappa2.pkl','w'))
            pickle.dump(pickle.load(open(dataDir+'/saveKappas_003_'+strList[i]))-nullMap4[i],open('kappa3.pkl','w'))
            
            if count == 0:
                crossPower1 = crossPower1Old.copy()
                crossPower2 = crossPower2Old.copy()
                crossPower3 = crossPower3Old.copy()
                crossPower4 = crossPower4Old.copy()

            count +=1

averagePower = powerFromKMap(nullMap2[0],nullMap2[0],p2d,ftex)
averagePower.powerMap = (crossPower1.powerMap+crossPower2.powerMap+crossPower3.powerMap+crossPower4.powerMap)
averagePower.powerMap /= 4.
averagePower.powerMap[0,0] = averagePower.powerMap[0,1]

lL,lU,lBin,clBin1,weights = weightedBinInAnnuli(averagePower,weightMap,'BIN_LENS',3300,0)
print lBin, clBin1

pickle.dump(clBin1,open('clData_south.pkl','w'))
pickle.dump(lBin,open('lBinData.pkl','w'))

X = numpy.loadtxt('/project/rbond/sudeep/theoryFiles/bode_almost_wmap5_lmax_1e4\
_scalCls.dat')
tcmb = 2.726e6
clkk = X[:,4]/(4.*tcmb**2)
l = X[:,0]

tag = 'New'
clBinUn = pickle.load(open(mcDir+"/meanClsUn.pkl"))
clBinSigma = pickle.load(open(mcDir+"/scatter.pkl"))
fac = 1.
pylab.plot(lBin,clBin1,"o",label='data')
pylab.plot(lBin,clBinUn*fac,label='unlensed')
pylab.errorbar(lBin,(clBin1 -clBinUn*fac),clBinSigma,fmt="o",label='data-unlensed')
pylab.plot(l,clkk)
pylab.legend(loc='best')
g = pylab.gca()
g.set_yscale("log")
g.set_xscale("log")
pylab.xlim(10,3300)
pylab.ylim(1e-10,1e-4)
pylab.savefig("clsData_south_%s.png"%tag)

