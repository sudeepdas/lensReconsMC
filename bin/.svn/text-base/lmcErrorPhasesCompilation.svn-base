#!/usr/bin/env python
#Given N-maps calculates cross-reconstruction between them

from flipper import *
#from lensTools  import *
from numpy.fft import fftshift,fftfreq,fft2,ifft2
from scipy import interpolate
from scipy import *
import os
import random
import pickle
import numpy
from fftTools import *

def weightedBinInAnnuli(p2d,weightMap,binningFile,trimAtL,powerOfL):
    binLo,binHi,binCent = fftTools.readBinningFile(binningFile)
    id = numpy.where(binHi<trimAtL)
    binHi = binHi[id]
    binLo = binLo[id]
    binCent = binCent[id]
    binnedPower = binCent.copy()*0.
    binCount = binCent.copy()*0.
    weightedBincount = binCent.copy()
    modIntLMap = numpy.array(p2d.modLMap + 0.5,dtype='int64')
    for ibin in xrange(len(binHi)):
        loc = numpy.where((modIntLMap >= binLo[ibin]) & (modIntLMap <= binHi[ibin]))
        binMap = numpy.nan_to_num(p2d.powerMap.copy())*0.
        binMap[loc] = weightMap[loc]
        binnedPower[ibin] = numpy.sum(numpy.nan_to_num(p2d.powerMap)*\
                                      binMap*p2d.modLMap**powerOfL)/numpy.sum(binMap)
        binCount[ibin] = len(loc[0])
        weightedBincount[ibin] = 1./(numpy.sum(weightMap[loc]**2)/(numpy.sum(weightMap[loc]))**2)
                                        #print binCount[ibin]/weightedBincount
    return binLo,binHi,binCent,binnedPower, weightedBincount/2.

def powerFromKMap(k1,k2,ft,ftret):
    """
    @brief Creates a power2D object from one power 2D object and two kmaps
    """
    p2d = ftret.copy()
    mapFFT = k1.copy()
    mapFFT2 = k2.copy()

    area =ft.Nx*ft.Ny*ft.pixScaleX*ft.pixScaleY
    p2d.powerMap = numpy.real(numpy.conjugate(mapFFT)*mapFFT2)#*area/(ft.Nx*ft.Ny*1.0)**2
    
    return p2d

p = flipperDict.flipperDict()
p.read_from_file(sys.argv[1])
nullDir = p['nullDir']
lensedDir = p['lensedDir']
nMCs = p['nMCs']
nMCsStart = p['nMCsStart']
nMCOld = p['nMOld']
rootName = p['rootName']
examplePatch = p['examplePatch']
trimAtL = p['trimAtL']
exampleLiteMap = liteMap.liteMapFromFits(examplePatch)
p2d = fftTools.powerFromLiteMap(exampleLiteMap)
ftex = p2d.trimAtL(trimAtL)
#indicesList = pickle.load(open(nullDir+'indicesList'+'000'+'0','r'))
numDivs = p['numDivs']
mapList = p['mapList']
mapNo = eval(sys.argv[2])
tag = p['tag']
indicesTag = p['indicesTag']
binFile = p['binFile']
weighting = p['weighting']
numPhases = p['numPhases']
oldNullDir = p['oldNullDir']
print 'computing null kappa maps'

if nMCsStart == None:
    nMCsStart = 0
    
allDivsList = []
if oldNullDir != None:
    for theMap in mapList:
        for q in xrange(nMCOld):
            print q
            divMaps1 = pickle.load(open(oldNullDir+rootName+"%03d"%q+'_'+theMap+'_'+indicesTag))
            divMaps1 = numpy.array(divMaps1)
            if q == 0:
                allDivs1 = divMaps1
            else:
                allDivs1 += divMaps1
        allDivs1 /= nMCs
        allDivsList += [allDivs1]
    pickle.dump(allDivsList,open('allDivsList_'+tag+'.pkl','w'))

print 'finished null maps, now computing lensed'
print "phase randomization per SI %d"%numPhases
patchPowerList = []
patchPowerSquaredList = []

# calculates mean power spectrum for each map
cls = []
othercounter = 0
for theMap in [mapList[mapNo]]:
    for p in xrange(nMCsStart,nMCs):
        print theMap, p, nMCs
        for variable in xrange(numPhases):
            if variable == 0:
                phasedMap = pickle.load(open(nullDir+rootName+"%03d"%p+'_'+theMap+'_'+indicesTag))
                phasedMapPowerTotal = powerFromKMap(phasedMap,phasedMap,p2d,ftex)
            else:
                phasedMap = pickle.load(open(nullDir+rootName+"%03d"%p+"%03d"%variable+'_'+theMap+'_'+indicesTag))
                phasedMapPower = powerFromKMap(phasedMap,phasedMap,p2d,ftex)
                phasedMapPowerTotal.powerMap += phasedMapPower.powerMap
        phasedMapPowerTotal.powerMap /= numPhases
        divMaps1 = pickle.load(open(lensedDir+rootName+"%03d"%p+'_'+theMap+'_'+indicesTag))
        divMaps1 = numpy.array(divMaps1)
        #divMaps1 -= allDivsList[mapNo]   
        crossPower1Mean = powerFromKMap(divMaps1,divMaps1,p2d,ftex)        
        if p == nMCsStart:
            patchPower = crossPower1Mean.powerMap - phasedMapPowerTotal.powerMap
            patchPowerSquared = patchPower**2.
            #justPhase = phasedMapPowerTotal.powerMap
        else:
            patchPower += crossPower1Mean.powerMap - phasedMapPowerTotal.powerMap
            patchPowerSquared += (crossPower1Mean.powerMap- phasedMapPowerTotal.powerMap)**2.

        weightMap = patchPower*0. + 1.0
        crossPower1Mean.powerMap -= phasedMapPowerTotal.powerMap
        lL,lU,lBin,clBin,junk = weightedBinInAnnuli(crossPower1Mean,weightMap,binFile,trimAtL,0)
        cls += [clBin]
        
            #justPhase += phasedMapPowerTotal.powerMap
    patchPower /= (nMCs - nMCsStart)
    patchPowerSquared /= (nMCs - nMCsStart)
    patchPowerList += [patchPower]
    patchPowerSquaredList += [patchPowerSquared]
    
    
    othercounter += 1

meanCls = numpy.mean(cls,axis=0)
sdCls =numpy.std(cls,axis=0)

                   
pickle.dump(patchPowerList[0],open('pPower'+mapList[mapNo],'w'))
pickle.dump(patchPowerSquaredList[0],open('pPowerSquared'+mapList[mapNo],'w'))
pickle.dump([lBin,meanCls,sdCls],open('binnedPower'+mapList[mapNo],'w'))

pylab.errorbar(lBin,meanCls,sdCls,fmt="o")

X = numpy.loadtxt('/project/rbond/sudeep/theoryFiles/bode_almost_wmap5_lmax_1e4_scalCls.dat')
tcmb = 2.726e6
clkk = X[:,4]/(4.*tcmb**2)
l = X[:,0]

pylab.plot(l,clkk)

g = pylab.gca()
#g.set_yscale("log")
g.set_xscale("log")
pylab.xlim(10,3000)
pylab.ylim(-0.5e-7,12e-7)    
print lBin, meanCls
pylab.title("patch_%s"%mapList[mapNo])
pylab.savefig("clsSimpleMean_%s.png"%(mapList[mapNo]))
