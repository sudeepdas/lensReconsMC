#!/usr/bin/env python
#Given N-maps calculates cross-reconstruction between them

from flipper import *
#from lensTools  import *
from numpy.fft import fftshift,fftfreq,fft2,ifft2
from scipy import interpolate
from scipy import *
import os
import random
import pickle
import numpy
from fftTools import *

def weightedBinInAnnuli(p2d,weightMap,binningFile,trimAtL,powerOfL):
    binLo,binHi,binCent = fftTools.readBinningFile(binningFile)
    id = numpy.where(binHi<trimAtL)
    binHi = binHi[id]
    binLo = binLo[id]
    binCent = binCent[id]
    binnedPower = binCent.copy()*0.
    binCount = binCent.copy()*0.
    weightedBincount = binCent.copy()
    modIntLMap = numpy.array(p2d.modLMap + 0.5,dtype='int64')
    for ibin in xrange(len(binHi)):
        loc = numpy.where((modIntLMap >= binLo[ibin]) & (modIntLMap <= binHi[ibin]))
        binMap = p2d.powerMap.copy()*0.
        binMap[loc] = weightMap[loc]
        binnedPower[ibin] = numpy.sum(p2d.powerMap*binMap*p2d.modLMap**powerOfL)/numpy.sum(binMap)
        binCount[ibin] = len(loc[0])
        weightedBincount[ibin] = 1./(numpy.sum(weightMap[loc]**2)/(numpy.sum(weightMap[loc]))**2)
                                        #print binCount[ibin]/weightedBincount
    return binLo,binHi,binCent,binnedPower, weightedBincount/2.

def powerFromKMap(k1,k2,ft,ftret):
    """
    @brief Creates a power2D object from one power 2D object and two kmaps
    """
    p2d = ftret.copy()
    mapFFT = k1.copy()
    mapFFT2 = k2.copy()

    area =ft.Nx*ft.Ny*ft.pixScaleX*ft.pixScaleY
    p2d.powerMap = numpy.real(numpy.conjugate(mapFFT)*mapFFT2)#*area/(ft.Nx*ft.Ny*1.0)**2
    
    return p2d

p = flipperDict.flipperDict()
p.read_from_file(sys.argv[1])
nullDir = p['nullDir']
lensedDir = p['lensedDir']
nMCs = p['nMCs']
rootName = p['rootName']
examplePatch = p['examplePatch']
trimAtL = p['trimAtL']
exampleLiteMap = liteMap.liteMapFromFits(examplePatch)
p2d = fftTools.powerFromLiteMap(exampleLiteMap)
ftex = p2d.trimAtL(trimAtL)
#indicesList = pickle.load(open(nullDir+'indicesList'+'000'+'0','r'))
numDivs = p['numDivs']

indicesList = ['allall']
#indList = []
#for i in xrange(numDivs):
#    for j in xrange(i):
#        indicesList += ["%d%d"%(j,i)]
#        
#        indList += [[i,j]] 
print indicesList
#print indList

# gets mean kappa from mcs
for q in xrange(nMCs):
    #for i in xrange(numDivs):
    divMaps4 = []#numpy.arange(len(indicesList))
    divMaps5 = []#numpy.arange(len(indicesList))
    divMaps6 = []#numpy.arange(len(indicesList))
    divMaps7 = []#numpy.arange(len(indicesList))
    divMaps8 = []#numpy.arange(len(indicesList))
    divMaps9 = []#numpy.arange(len(indicesList))
    divMaps10 = []#numpy.arange(len(indicesList)
    divMaps11 = []#numpy.arange(len(indicesList))
    divMaps12 = []#numpy.arange(len(indicesList))



    count = 0
    for ind in indicesList:
        divMaps4 += [pickle.load(open(nullDir+rootName+"%03d"%q+'_004'+'_'+ind))]
        divMaps5 += [pickle.load(open(nullDir+rootName+"%03d"%q+'_005'+'_'+ind))]
        divMaps6 += [pickle.load(open(nullDir+rootName+"%03d"%q+'_006'+'_'+ind))]
        divMaps7 += [pickle.load(open(nullDir+rootName+"%03d"%q+'_007'+'_'+ind))]
        divMaps8 += [pickle.load(open(nullDir+rootName+"%03d"%q+'_008'+'_'+ind))]
        divMaps9 += [pickle.load(open(nullDir+rootName+"%03d"%q+'_009'+'_'+ind))]
        divMaps10 += [pickle.load(open(nullDir+rootName+"%03d"%q+'_010'+'_'+ind))]
        divMaps11 += [pickle.load(open(nullDir+rootName+"%03d"%q+'_011'+'_'+ind))]
        divMaps12 += [pickle.load(open(nullDir+rootName+"%03d"%q+'_012'+'_'+ind))]
        
        count += 1
    divMaps4 = numpy.array(divMaps4)
    divMaps5 = numpy.array(divMaps5)
    divMaps6 = numpy.array(divMaps6)
    divMaps7 = numpy.array(divMaps7)
    divMaps8 = numpy.array(divMaps8)
    divMaps9 = numpy.array(divMaps9)
    divMaps10 = numpy.array(divMaps10)
    divMaps11 = numpy.array(divMaps11)
    divMaps12 = numpy.array(divMaps12)
    
    if q == 0:
        allDivs4 = divMaps4
        allDivs5 = divMaps5
        allDivs6 = divMaps6
        allDivs7 = divMaps7
        
        allDivs8 = divMaps8
        allDivs9 = divMaps9
        allDivs10 = divMaps10
        allDivs11 = divMaps11
        allDivs12 = divMaps12
    else:
        allDivs4[:] += divMaps4[:]
        allDivs5[:] += divMaps5[:]
        allDivs6[:] += divMaps6[:]
        allDivs7[:] += divMaps7[:]

        allDivs8[:] += divMaps8[:]
        allDivs9[:] += divMaps9[:]
        allDivs10[:] += divMaps10[:]
        allDivs11[:] += divMaps11[:]

        allDivs12[:] += divMaps12[:]

allDivs4[:] /= nMCs
allDivs5[:] /= nMCs
allDivs6[:] /= nMCs
allDivs7[:] /= nMCs
allDivs8[:] /= nMCs
allDivs9[:] /= nMCs
allDivs10[:] /= nMCs
allDivs11[:] /= nMCs
allDivs12[:] /= nMCs

pickle.dump(allDivs4,open('averageNullKappaMap1.pkl','w'))
pickle.dump(allDivs5,open('averageNullKappaMap2.pkl','w'))
pickle.dump(allDivs6,open('averageNullKappaMap3.pkl','w'))
pickle.dump(allDivs7,open('averageNullKappaMap4.pkl','w'))
pickle.dump(allDivs8,open('averageNullKappaMap1.pkl','w'))
pickle.dump(allDivs9,open('averageNullKappaMap2.pkl','w'))
pickle.dump(allDivs10,open('averageNullKappaMap3.pkl','w'))
pickle.dump(allDivs11,open('averageNullKappaMap4.pkl','w'))
pickle.dump(allDivs12,open('averageNullKappaMap1.pkl','w'))

patch4Power = []
patch5Power = []
patch6Power = []
patch7Power = []
patch8Power = []
patch9Power = []
patch10Power = []
patch11Power = []
patch12Power = []


# calculates mean power spectrum for each map
for p in xrange(nMCs):
    divMaps4 = []
    divMaps5 = []
    divMaps6 = []
    divMaps7 = []
    divMaps8 = []
    divMaps9 = []
    divMaps10 = []
    divMaps11 = []
    divMaps12 = []
    
    count = 0
    for ind in indicesList:
        divMaps4 += [pickle.load(open(lensedDir+rootName+"%03d"%p+'_004'+'_'+ind))]
        divMaps5 += [pickle.load(open(lensedDir+rootName+"%03d"%p+'_005'+'_'+ind))]
        divMaps6 += [pickle.load(open(lensedDir+rootName+"%03d"%p+'_006'+'_'+ind))]
        divMaps7 += [pickle.load(open(lensedDir+rootName+"%03d"%p+'_007'+'_'+ind))]
        divMaps8 += [pickle.load(open(lensedDir+rootName+"%03d"%p+'_008'+'_'+ind))]
        divMaps9 += [pickle.load(open(lensedDir+rootName+"%03d"%p+'_009'+'_'+ind))]
        divMaps10 += [pickle.load(open(lensedDir+rootName+"%03d"%p+'_010'+'_'+ind))]
        divMaps11 += [pickle.load(open(lensedDir+rootName+"%03d"%p+'_011'+'_'+ind))]
        divMaps12 += [pickle.load(open(lensedDir+rootName+"%03d"%p+'_012'+'_'+ind))]
        count += 1

    divMaps4 = numpy.array(divMaps4)
    divMaps5 = numpy.array(divMaps5)
    divMaps6 = numpy.array(divMaps6)
    divMaps7 = numpy.array(divMaps7)
    divMaps8 = numpy.array(divMaps8)
    divMaps9 = numpy.array(divMaps9)
    divMaps10 = numpy.array(divMaps10)
    divMaps11 = numpy.array(divMaps11)
    divMaps12 = numpy.array(divMaps12)

    divMaps4[:] -= allDivs4[:]
    divMaps5[:] -= allDivs5[:]
    divMaps6[:] -= allDivs6[:]
    divMaps7[:] -= allDivs7[:]
    divMaps8[:] -= allDivs8[:]
    divMaps9[:] -= allDivs9[:]
    divMaps10[:] -= allDivs10[:]
    divMaps11[:] -= allDivs11[:]
    divMaps12[:] -= allDivs12[:]
    
    nDivs = len(divMaps1)
    count = 0
    for i in xrange(len(indicesList)):
        for j in xrange(len(indicesList)):
            difference = 1
            #for k in xrange(2):
            #    for lll in xrange(2):
            #        if (indicesList[i][k] == indicesList[j][lll]):
            #            difference = 0
            if difference:
                #print i,j,indicesList[i],indicesList[j], difference
                crossPower4Old = powerFromKMap(divMaps4[i],divMaps4[j],p2d,ftex)
                crossPower5Old = powerFromKMap(divMaps5[i],divMaps5[j],p2d,ftex)                
                crossPower6Old = powerFromKMap(divMaps6[i],divMaps6[j],p2d,ftex)
                crossPower7Old = powerFromKMap(divMaps7[i],divMaps7[j],p2d,ftex)
                crossPower8Old = powerFromKMap(divMaps8[i],divMaps8[j],p2d,ftex)
                crossPower9Old = powerFromKMap(divMaps9[i],divMaps9[j],p2d,ftex)                
                crossPower10Old = powerFromKMap(divMaps10[i],divMaps10[j],p2d,ftex)
                crossPower11Old = powerFromKMap(divMaps11[i],divMaps11[j],p2d,ftex)
                crossPower12Old = powerFromKMap(divMaps12[i],divMaps12[j],p2d,ftex)
                
                if count == 0:
                    crossPower4 = crossPower4Old.copy()
                    crossPower5 = crossPower5Old.copy()
                    crossPower6 = crossPower6Old.copy()
                    crossPower7 = crossPower7Old.copy()
                    crossPower8 = crossPower8Old.copy()
                    crossPower9 = crossPower9Old.copy()
                    crossPower10 = crossPower10Old.copy()
                    crossPower11 = crossPower11Old.copy()
                    crossPower12 = crossPower12Old.copy()
                    
                else:
                    crossPower4.powerMap[:] += crossPower4Old.powerMap[:]
                    crossPower5.powerMap[:] += crossPower5Old.powerMap[:]
                    crossPower6.powerMap[:] += crossPower6Old.powerMap[:]
                    crossPower7.powerMap[:] += crossPower7Old.powerMap[:]
                    crossPower8.powerMap[:] += crossPower8Old.powerMap[:]
                    crossPower9.powerMap[:] += crossPower9Old.powerMap[:]
                    crossPower10.powerMap[:] += crossPower10Old.powerMap[:]
                    crossPower11.powerMap[:] += crossPower11Old.powerMap[:]
                    crossPower12.powerMap[:] += crossPower12Old.powerMap[:]
                    

                    print 'adding power, n=', count
            
                count +=1
    crossPower4Mean = crossPower4.copy()
    crossPower5Mean = crossPower5.copy()
    crossPower6Mean = crossPower6.copy()
    crossPower7Mean = crossPower7.copy()
    crossPower8Mean = crossPower8.copy()
    crossPower9Mean = crossPower9.copy()
    crossPower10Mean = crossPower10.copy()
    crossPower11Mean = crossPower11.copy()
    crossPower12Mean = crossPower12.copy()

    crossPower4Mean.powerMap[:] #/= count
    crossPower5Mean.powerMap[:] #/= count
    crossPower6Mean.powerMap[:] #/= count
    crossPower7Mean.powerMap[:] #/= count
    crossPower8Mean.powerMap[:] #/= count
    crossPower9Mean.powerMap[:] #/= count
    crossPower10Mean.powerMap[:] #/= count
    crossPower11Mean.powerMap[:] #/= count
    crossPower12Mean.powerMap[:] #/= count
    #lL,lU,lBin,clBin4, plErr_0012,weights = crossPower1Mean.binInAnnuli('BIN_100_LOG')
    #lL,lU,lBin,clBin5, plErr_0012,weights = crossPower2Mean.binInAnnuli('BIN_100_LOG')
    #lL,lU,lBin,clBin6, plErr_0012,weights = crossPower3Mean.binInAnnuli('BIN_100_LOG')
    #lL,lU,lBin,clBin7, plErr_0012,weights = crossPower4Mean.binInAnnuli('BIN_100_LOG')
    #lL,lU,lBin,clBin8, plErr_0012,weights = crossPower1Mean.binInAnnuli('BIN_100_LOG')
    #lL,lU,lBin,clBin9, plErr_0012,weights = crossPower2Mean.binInAnnuli('BIN_100_LOG')
    #lL,lU,lBin,clBin10, plErr_0012,weights = crossPower3Mean.binInAnnuli('BIN_100_LOG')
    #lL,lU,lBin,clBin11, plErr_0012,weights = crossPower4Mean.binInAnnuli('BIN_100_LOG')
    #lL,lU,lBin,clBin12, plErr_0012,weights = crossPower1Mean.binInAnnuli('BIN_100_LOG')
    patch4Power += [crossPower4Mean.powerMap]
    patch5Power += [crossPower5Mean.powerMap]
    patch6Power += [crossPower6Mean.powerMap]
    patch7Power += [crossPower7Mean.powerMap]
    patch8Power += [crossPower8Mean.powerMap]
    patch9Power += [crossPower9Mean.powerMap]
    patch10Power += [crossPower10Mean.powerMap]
    patch11Power += [crossPower11Mean.powerMap]
    patch12Power += [crossPower12Mean.powerMap]

patch4PowerUn = []
patch5PowerUn = []
patch6PowerUn = []
patch7PowerUn = []
patch8PowerUn = []
patch9PowerUn = []
patch10PowerUn = []
patch11PowerUn = []

# mean unlensed power spectrum for each map
for p in xrange(nMCs):
    divMaps4 = []
    divMaps5 = []
    divMaps6 = []
    divMaps7 = []
    divMaps8 = []
    divMaps9 = []
    divMaps10 = []
    divMaps11 = []
    divMaps12 = []
    count = 0
    for ind in indicesList:

        divMaps4 += [pickle.load(open(nullDir+rootName+"%03d"%p+'_004'+'_'+ind))]
        divMaps5 += [pickle.load(open(nullDir+rootName+"%03d"%p+'_005'+'_'+ind))]
        divMaps6 += [pickle.load(open(nullDir+rootName+"%03d"%p+'_006'+'_'+ind))]
        divMaps7 += [pickle.load(open(nullDir+rootName+"%03d"%p+'_007'+'_'+ind))]
        divMaps8 += [pickle.load(open(nullDir+rootName+"%03d"%p+'_008'+'_'+ind))]
        divMaps9 += [pickle.load(open(nullDir+rootName+"%03d"%p+'_009'+'_'+ind))]
        divMaps10 += [pickle.load(open(nullDir+rootName+"%03d"%p+'_010'+'_'+ind))]
        divMaps11 += [pickle.load(open(nullDir+rootName+"%03d"%p+'_011'+'_'+ind))]
        divMaps12 += [pickle.load(open(nullDir+rootName+"%03d"%p+'_012'+'_'+ind))]

        count += 1
    divMaps4 = numpy.array(divMaps4)
    divMaps5 = numpy.array(divMaps5)
    divMaps6 = numpy.array(divMaps6)
    divMaps7 = numpy.array(divMaps7)
    divMaps8 = numpy.array(divMaps8)
    divMaps9 = numpy.array(divMaps9)
    divMaps10 = numpy.array(divMaps10)
    divMaps11 = numpy.array(divMaps11)
    divMaps12 = numpy.array(divMaps12)
    
    divMaps4[:] -= allDivs4[:]
    divMaps5[:] -= allDivs5[:]
    divMaps6[:] -= allDivs6[:]
    divMaps7[:] -= allDivs7[:]
    divMaps8[:] -= allDivs8[:]
    divMaps9[:] -= allDivs9[:]
    divMaps10[:] -= allDivs10[:]
    divMaps11[:] -= allDivs11[:]
    divMaps12[:] -= allDivs12[:]
    
    nDivs = len(divMaps4)
    count = 0
    for i in xrange(len(indicesList)):
        for j in xrange(len(indicesList)):
            difference = 1
            #for k in xrange(2):
            #    for lll in xrange(2):
            #        if (indList[i][k] == indList[j][lll]):
            #            difference = 0
            if difference:
                #print i,j,indList[i],indList[j], difference
                crossPower4Old = powerFromKMap(divMaps4[i],divMaps4[j],p2d,ftex)
                crossPower5Old = powerFromKMap(divMaps5[i],divMaps5[j],p2d,ftex)                
                crossPower6Old = powerFromKMap(divMaps6[i],divMaps6[j],p2d,ftex)
                crossPower7Old = powerFromKMap(divMaps7[i],divMaps7[j],p2d,ftex)
                crossPower8Old = powerFromKMap(divMaps8[i],divMaps8[j],p2d,ftex)
                crossPower9Old = powerFromKMap(divMaps9[i],divMaps9[j],p2d,ftex)                
                crossPower10Old = powerFromKMap(divMaps10[i],divMaps10[j],p2d,ftex)
                crossPower11Old = powerFromKMap(divMaps11[i],divMaps11[j],p2d,ftex)
                crossPower12Old = powerFromKMap(divMaps12[i],divMaps12[j],p2d,ftex)
            
                if count == 0:
                    crossPower4 = crossPower4Old.copy()
                    crossPower5 = crossPower5Old.copy()
                    crossPower6 = crossPower6Old.copy()
                    crossPower7 = crossPower7Old.copy()
                    crossPower8 = crossPower8Old.copy()
                    crossPower9 = crossPower9Old.copy()
                    crossPower10 = crossPower10Old.copy()
                    crossPower11 = crossPower11Old.copy()
                    crossPower12 = crossPower12Old.copy()
                else:
                    crossPower1.powerMap[:] += crossPower1Old.powerMap[:]
                    crossPower2.powerMap[:] += crossPower2Old.powerMap[:]
                    crossPower3.powerMap[:] += crossPower3Old.powerMap[:]
                    crossPower4.powerMap[:] += crossPower4Old.powerMap[:]
                    crossPower1.powerMap[:] += crossPower1Old.powerMap[:]
                    crossPower2.powerMap[:] += crossPower2Old.powerMap[:]
                    crossPower3.powerMap[:] += crossPower3Old.powerMap[:]
                    crossPower4.powerMap[:] += crossPower4Old.powerMap[:]
                    crossPower1.powerMap[:] += crossPower1Old.powerMap[:]
                    print 'adding power, n=', count
            
                count +=1
    crossPower4Mean = crossPower4.copy()
    crossPower5Mean = crossPower5.copy()
    crossPower6Mean = crossPower6.copy()
    crossPower7Mean = crossPower7.copy()
    crossPower8Mean = crossPower8.copy()
    crossPower9Mean = crossPower9.copy()
    crossPower10Mean = crossPower10.copy()
    crossPower11Mean = crossPower11.copy()
    crossPower12Mean = crossPower12.copy()
    crossPower4Mean.powerMap[:]# /= count
    crossPower5Mean.powerMap[:]# /= count
    crossPower6Mean.powerMap[:]# /= count
    crossPower7Mean.powerMap[:]# /= count
    crossPower8Mean.powerMap[:]# /= count
    crossPower9Mean.powerMap[:]# /= count
    crossPower10Mean.powerMap[:]# /= count
    crossPower11Mean.powerMap[:]# /= count
    crossPower12Mean.powerMap[:]# /= count
    #lL,lU,lBin,clBin1, plErr_0012,weights = crossPower1Mean.binInAnnuli('BIN_100_LOG')
    #lL,lU,lBin,clBin2, plErr_0012,weights = crossPower2Mean.binInAnnuli('BIN_100_LOG') 
    #lL,lU,lBin,clBin3, plErr_0012,weights = crossPower3Mean.binInAnnuli('BIN_100_LOG')
    #lL,lU,lBin,clBin4, plErr_0012,weights = crossPower4Mean.binInAnnuli('BIN_100_LOG')
    patch4PowerUn += [crossPower4Mean.powerMap]
    patch5PowerUn += [crossPower5Mean.powerMap]
    patch6PowerUn += [crossPower6Mean.powerMap]
    patch7PowerUn += [crossPower7Mean.powerMap]
    patch8PowerUn += [crossPower8Mean.powerMap]
    patch9PowerUn += [crossPower9Mean.powerMap]
    patch10PowerUn += [crossPower10Mean.powerMap]
    patch11PowerUn += [crossPower11Mean.powerMap]
    patch12PowerUn += [crossPower12Mean.powerMap]


patchPowerTotal = patch4Power
for var in xrange(len(patchPowerTotal)):
    patchPowerTotal[var] += patch5Power[var] + patch6Power[var] + patch7Power[var]
    patchPowerTotal[var] += patch8Power[var] + patch9Power[var] + patch10Power[var]+patch11Power[var]+patch12Power[var]
    patchPowerTotal[var] /= 9.

patchPowerTotalUn = patch4PowerUn
for var in xrange(len(patchPowerTotalUn)):
    patchPowerTotalUn[var] += patch5PowerUn[var] + patch6PowerUn[var] + patch7PowerUn[var]
    patchPowerTotalUn[var] += patch8PowerUn[var] + patch9PowerUn[var] + patch10PowerUn[var]+patch11PowerUn[var]+patch12PowerUn[var]
    patchPowerTotalUn[var] /= 9.

scatterFile = []
filecount = 0

for r in xrange(nMCs):
    if r == 0:
        meanCls = patchPowerTotal[r].copy()
    else:
        meanCls += patchPowerTotal[r]
meanCls[:] /= nMCs

for r in xrange(nMCs):
    if r == 0:
        meanClsUn = patchPowerTotalUn[r].copy()
    else:
        meanClsUn += patchPowerTotalUn[r]
meanClsUn[:] /= nMCs

#sum = crossPowerMean.powerMap.sum()
for r in xrange(nMCs):
    aCl = patchPowerTotal[r].copy()
    if r == 0:
        scatter = (aCl - meanCls)**2.
    else:
        scatter += (aCl - meanCls)**2.
scatter = numpy.sqrt(scatter/nMCs)
crossPower1Mean.powerMap = scatter
pickle.dump(crossPower1Mean,open('scatterFileSeason_equ','w'))
weightMap = 1./scatter**2.
weightMap[0,0] = weightMap[1,0]


########### now weighted bin lensed and unlensed
crossPowerMean = crossPower1Mean.copy()
crossPowerMean.powerMap = meanCls
crossPowerMean.powerMap[0,0] = crossPowerMean.powerMap[0,1]
lL,lU,lBin,meanCls,weights = weightedBinInAnnuli(crossPowerMean,weightMap,'BIN_LENS',3300,0)

crossPowerMean2 = crossPower1Mean.copy()
crossPowerMean2.powerMap = meanClsUn
crossPowerMean2.powerMap[0,0] = crossPowerMean2.powerMap[0,1]
lL,lU,lBin,meanClsUn,weights = weightedBinInAnnuli(crossPowerMean2,weightMap,'BIN_LENS',3300,0)

pickle.dump(lBin,open('lBin.pkl','w'))
pickle.dump(meanCls,open('meanCls_equ.pkl','w'))
pickle.dump(meanClsUn,open('meanClsUn_equ.pkl','w'))
#pickle.dump(scatter,open('scatter_equ.pkl','w'))

