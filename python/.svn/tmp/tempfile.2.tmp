from flipper import *
import pickle
from numpy.fft import fft2,ifft2,fftshift
#from lmcMisc import *
import lmcMisc
import scipy



class superMap:
    def __init__(self,map,noisePower,beamFile,ell,cEllModel,trimAtL=None):
        
        self.map = map
        self.ftMap = fftTools.fftFromLiteMap(map)
        twoDBeam = self.ftMap.kMap*0.+1.
        print 'aaa', beamFile
        l, bl = numpy.loadtxt(beamFile,unpack=True)
        print 'blabla',l, bl
        print len(l), len(bl)
        twoDBeam = lmcMisc.makeTemplate(l,bl,self.ftMap)
        self.twoDBeam = twoDBeam
        del twoDBeam
        self.power2d = fftTools.powerFromLiteMap(map)
        self.ftMap.kMap[:] /= self.twoDBeam
        self.power2d.powerMap[:] /= (self.twoDBeam[:] *self.twoDBeam[:])
        if trimAtL != None:
            self.ftMapTrim = self.ftMap.trimAtL(trimAtL)
        self.trimAtL = trimAtL
        self.noisePower = noisePower/self.twoDBeam/self.twoDBeam
        self.ell = ell
        self.cEllModel = cEllModel
        
        
        
        self.twoDModel = lmcMisc.makeTemplate(ell,cEllModel,self.ftMap)
        self.filter = None
        self.filteredMap = None  
        
    def makeFilter(self,type,keepAnnulus=None):
        """
        returns low/high pass filtered, beam deconvolved ftMap
        """
        if type !='lowPass' and type !='highPass':
            raise ValueError, 'type must be lowPass or highPass'
        if type == 'lowPass':
            self.filter = self.twoDModel/(self.twoDModel + self.noisePower)
        else:
            self.filter = (self.twoDModel*0.+1.)\
                          /(self.twoDModel + self.noisePower)
        if keepAnnulus != None:
            id = numpy.where((self.ftMap.lMap < keepAnnulus[0]))
            self.filter[id] = 0.
            id = numpy.where((self.ftMap.lMap > keepAnnulus[1]))
            self.filter[id] = 0.
        self.filteredMap = self.filter*self.ftMap.kMap


def getKappa(sm0,sm1,crossPowerEstimate,keepAnnulus0=None, keepAnnulus1=None):
    # if sm0.trimAtL != None:
    #    assert(sm0.trimAtL == sm1.trimAtL)
    #    crossPowerEstimate = crossPowerEstimate.trimAtL(sm0.trimAtL)

    sm1.makeFilter(type='lowPass',keepAnnulus=keepAnnulus0)
    sm0.makeFilter(type='highPass',keepAnnulus= keepAnnulus1)

    ftex, tempKappa, ignore = makeKappaMap(sm0,sm1,crossPowerEstimate/sm0.twoDBeam**2)
    return tempKappa*sm0.power2d.pixScaleX*sm0.power2d.pixScaleY*numpy.sqrt(sm0.power2d.pixScaleX*sm0.power2d.pixScaleY\
                                            /sm0.power2d.Nx/sm0.power2d.Ny)

def makeKappaMap(sm0,sm1,crossPowerEstimate):
    """
    @brief Finds the normalization and noise bias of the lensing filter.
    This is different from normalize() as it does all operations in
    the 2-D L-space without resorting to interpolations.
    Uses NofL2D.
    @param trim2DAtL trim the 2D calculation at a given L
    
    """
    
    ft = sm0.power2d.copy()#fftTools.powerFromLiteMap(sm0.map) #self.powerMap1
    trimAtL = sm0.trimAtL
    if sm0.trimAtL != None:
        ft = ft.trimAtL(trimAtL)
    # print ftLow.kMap, 'km'
    lx = numpy.fft.fftshift(ft.lx)
    ly = numpy.fft.fftshift(ft.ly)
    deltaLy = numpy.abs(ly[0]-ly[1])
    deltaLx = numpy.abs(lx[0]-lx[1])
    modLMap = numpy.fft.fftshift(ft.modLMap)
    thetaMap = numpy.fft.fftshift(ft.thetaMap)
    cosTheta = numpy.cos(thetaMap*numpy.pi/180.)
    LhatDotEl = modLMap*cosTheta
    dims = [ft.Ny,ft.Nx]
    
    ftb = sm0.power2d.copy()#fftTools.powerFromLiteMap(sm0.map)
    lxb = numpy.fft.fftshift(ftb.lx)
    lyb = numpy.fft.fftshift(ftb.ly)
    ftKappa = sm0.ftMap.kMap
    kappaMap = trimShiftKMap(numpy.fft.fftshift(ftKappa),trimAtL,0,0,lxb,lyb)
    highPassFilteredMap = trimShiftKMap(numpy.fft.fftshift(sm0.ftMap.kMap),trimAtL,0,0,lxb,lyb)#used to be self.highPassKMap
    hpFilterM = trimShiftKMap(numpy.fft.fftshift(sm0.filteredMap),trimAtL,0,0,lxb,lyb)#used to be self.highPassF0
        
    lowPassBackup0 = sm1.filteredMap.copy()#self.lowPassKMap.copy()
    lowPassBackup = numpy.fft.fftshift(lowPassBackup0)
    lpFilterB0 = sm1.filter.copy()#self.lowPassF0.copy()
    lpFilterB = numpy.fft.fftshift(lpFilterB0)
    lowPassFilteredMap0 = sm1.filteredMap.copy()#self.lowPassKMap.copy()
    lowPassFilteredMap = numpy.fft.fftshift(lowPassFilteredMap0)
    lpFilterM0 = sm1.filter.copy()#self.lowPassF0.copy()
    lpFilterM = numpy.fft.fftshift(lpFilterM0)

    print lxb,'this is length'
    lowPassFilteredMap = mapFlip(lowPassBackup,lxb,lyb)#numpy.conjugate(lowPassBackup)
    lpFilterM = mapFlip(lpFilterB,lxb,lyb)
    
    lxMap = highPassFilteredMap.copy()
    lyMap = highPassFilteredMap.copy()
    print 'a'
    for p in xrange(len(ly)):
        lxMap[p,:] = lx[:]

    for q in xrange(len(lx)):
        lyMap[:,q] = ly[:]  
    print 'b'
    count = 0.
    normalizationNew = kappaMap.copy()
    noisebias = kappaMap.copy()
    cl0 = trimShiftKMap(numpy.fft.fftshift(crossPowerEstimate),trimAtL,0,0,lxb,lyb)
    print 'c'
    clN = trimShiftKMap(numpy.fft.fftshift(sm0.noisePower),trimAtL,0,0,lxb,lyb)
    print "p,q are:",p,q
    newLpFilterM = trimShiftKMap(numpy.fft.fftshift(sm1.filter),trimAtL,0,0,lxb,lyb)#used to be self.lowPassF0
    print '1'
    newHpFilterMFlip = mapFlip(numpy.fft.fftshift(sm0.filter),lxb,lyb)#used to be self.highPassF0
    print '2'
    clNFlip = mapFlip(numpy.fft.fftshift(sm0.noisePower),lxb,lyb)
        
        
    for i in xrange(len(ly)):
        a = time.time()
        for j in xrange(len(lx)):
            count += 1
            kappaMap[i,j], normalizationNew[i,j], ele, timeratio, timeratio2 = kappaIntegral(crossPowerEstimate,deltaLx,deltaLy,lx[j],\
                                                                                                                      ly[i],lxMap,lyMap,lxb,lyb,highPassFilteredMap,lowPassFilteredMap,hpFilterM,lpFilterM,trimAtL,cl0,clN,clNFlip,newLpFilterM,newHpFilterMFlip) #  #all fftsh
            if not (normalizationNew[i,j] ==  normalizationNew[i,j]):
                normalizationNew[i,j] = normalizationNew[i,j-1]
            #if not (noisebias[i,j] ==  noisebias[i,j]):
             #   noisebias[i,j] = noisebias[i,j-1]
            if j == 50+i:
                print 'values k,n1,n2,el', kappaMap[i,j], normalizationNew[i,j]
                print 'time ratio:', timeratio, timeratio2
        b = time.time()
        print i, len(ly), 'time=', (b-a)
        
    ftbla = ft.copy()
    ftbla.powerMap = numpy.real(numpy.fft.ifftshift(normalizationNew))
    ftbla.plot(zoomUptoL =3000, log=True)
    pylab.savefig('2Dnorm.png')
    
    lL,lU,lBin,clNo1,err,w = ftbla.binInAnnuli(os.environ['LENSRECONSMC_DIR']+os.path.sep+'params/BIN_100_LOG')  
        
    #self.kappaMap = numpy.fft.ifftshift(kappaMap)
        
    ftransf = ft.copy()
        
    return ftransf, numpy.fft.ifftshift(kappaMap), normalizationNew


def kappaIntegral(crossPowerEstimate,deltaLx,deltaLy,Lx,Ly,lx,ly,lxb,lyb,hpKMap,lpKMapMinl,hpf,lpf,trimAtL,cl0,clN,clNFlip,lpFTrim,hpFFlip):
    """
    @brief Computes kappa at a given L
    @param L the multipole to calculate at.
    """
        
    one = time.time()
    Lsqrd = Lx**2. + Ly**2.
    LdotEl = Lx*lx + Ly*ly
    LdotElPrime = Lx**2. + Ly**2. - (Lx*lx+Ly*ly)
    three = time.time()
    lowPassShifted = trimShiftKMap(lpKMapMinl,trimAtL,-Lx,-Ly,lxb,lyb)
    four = time.time()

    highPass = hpKMap
    kint = 1./(2.*numpy.pi)**2.*highPass*lowPassShifted*LdotElPrime*\
            deltaLx*deltaLy
    two = time.time()
    diff = two - one
        
    kappa = kint.sum()
        
    diff2 = four - three

    clL = trimShiftKMap(numpy.fft.fftshift(crossPowerEstimate),trimAtL,-Lx,-Ly,lxb,lyb) # used to be self.crossP1
    lpsf = trimShiftKMap(lpf,trimAtL,-Lx,-Ly,lxb,lyb)#(hpFFlip,trimAtL,-Lx,-Ly,lxb,lyb)
    nint = 2./Lsqrd*1./(2.*numpy.pi)**2.*(hpf*lpsf)*LdotElPrime*(LdotElPrime*clL+LdotEl*cl0)*\
            deltaLx*deltaLy
    norm = 1./nint.sum()
    kappa *= norm

    return kappa, norm,  numpy.sqrt(Lsqrd), diff, diff2
    
    
